openapi: '3.0.0'
info:
  description: 'This is the documentation for the Rest API architecture using Passport and Express for [RAVN](https://ravn.co)'
  version: 2.0.0
  title: 'NodeJs Rest API architecture'
  contact:
    email: 'fernando@ravn.co'
    name: 'Fernando Juarez'
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: 'general'
    description: 'generics routes for the server'
  - name: 'auth'
  - name: 'users'
  - name: 'admins'
  - name: 'admins-master'
    description: 'only for the admin with master type, also they can access to the admins routes'
servers:
  - url: '/api/v1'
    description: 'version 1'
paths:
  /status:
    get:
      tags:
        - 'general'
      responses:
        '200':
          description: 'The date of the server'
          content:
            application/json:
              schema:
                properties:
                  time:
                    type: 'string'
                    example: '2022-01-01T00:00:00.000Z'

  /auth/login:
    post:
      tags:
        - 'auth'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: 'string'
                password:
                  type: 'string'

      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
        '401':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/logout:
    post:
      tags:
        - 'auth'
      responses:
        '204':
          description: 'No content'
      security:
        - api_key: []
  /users:
    get:
      summary: 'Only for read admins'
      tags:
        - 'admins'
      responses:
        '200':
          description: 'The users registered'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/User'
      security:
        - api_key: []
    post:
      summary: 'Only for admins with write access'
      description: 'Create a new user'
      tags:
        - 'admins'
      requestBody:
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                firstName:
                  type: 'string'
                lastName:
                  type: 'string'
                email:
                  type: 'string'
                password:
                  type: 'string'
      responses:
        '201':
          description: 'The new user created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - api_key: []
  /users/me:
    get:
      tags:
        - 'users'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - api_key: []
    patch:
      tags:
        - 'users'
      requestBody:
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                firstName:
                  type: 'string'
                lastName:
                  type: 'string'
                email:
                  type: 'string'
                password:
                  type: 'string'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - api_key: []
  /users/confirm-account:
    post:
      tags:
        - 'users'
      parameters:
        - name: 'token'
          in: 'query'
          schema:
            type: 'string'
      responses:
        '204':
          description: 'No Content'
        '422':
          description: 'Unprocessable Entity'
  /users/{uuid}:
    get:
      tags:
        - 'admins'
      parameters:
        - name: 'uuid'
          in: 'path'
          description: 'The uuid for the user'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_key: []
    patch:
      summary: 'Only for admins with write access'
      tags:
        - 'admins'
      parameters:
        - name: 'uuid'
          in: 'path'
          description: 'The uuid for the user'
          required: true
          schema:
            type: 'string'
      requestBody:
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                firstName:
                  type: 'string'
                lastName:
                  type: 'string'
                email:
                  type: 'string'
                password:
                  type: 'string'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - api_key: []
    delete:
      summary: 'Only for admins with write access'
      tags:
        - 'admins'
      parameters:
        - name: 'uuid'
          in: 'path'
          description: 'The uuid for the user'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - api_key: []
  /admins:
    post:
      description: 'Create a new Admin'
      tags:
        - 'admins-master'
      requestBody:
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                fullName:
                  type: 'string'
                type:
                  type: 'string'
                  enum:
                    - 'master'
                    - 'write'
                    - 'read'
                email:
                  type: 'string'
                password:
                  type: 'string'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
      security:
        - api_key: []
    get:
      description: 'Retrieves all the admins'
      tags:
        - 'admins-master'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/Admin'
      security:
        - api_key: []
  /admins/{uuid}:
    get:
      description: 'Retrieves one admin'
      tags:
        - 'admins-master'
      parameters:
        - name: 'uuid'
          in: 'path'
          description: 'The uuid for the admin'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
      security:
        - api_key: []
    delete:
      tags:
        - 'admins-master'
      parameters:
        - name: 'uuid'
          in: 'path'
          description: 'The uuid for the admin'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
      security:
        - api_key: []
    patch:
      tags:
        - 'admins-master'
      parameters:
        - name: 'uuid'
          in: 'path'
          description: 'The uuid for the admin'
          required: true
          schema:
            type: 'string'
      requestBody:
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                fullName:
                  type: 'string'
                email:
                  type: 'string'
                password:
                  type: 'string'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
      security:
        - api_key: []
  /admins/me:
    get:
      tags:
        - 'admins'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
      security:
        - api_key: []
    patch:
      tags:
        - 'admins'
      requestBody:
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                fullName:
                  type: 'string'
                email:
                  type: 'string'
                password:
                  type: 'string'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
      security:
        - api_key: []

components:
  schemas:
    Admin:
      type: 'object'
      properties:
        uuid:
          type: 'string'
        type:
          type: 'string'
          enum:
            - 'master'
            - 'write'
            - 'read'
        fullName:
          type: 'string'
        email:
          type: 'string'
        createdAt:
          type: 'string'
    User:
      type: 'object'
      properties:
        uuid:
          type: 'string'
        firstName:
          type: 'string'
        lastName:
          type: 'string'
        email:
          type: 'string'
        createdAt:
          type: 'string'
    Login:
      type: 'object'
      properties:
        accessToken:
          type: 'string'
        exp:
          type: 'integer'
    Error:
      type: 'object'
      properties:
        message:
          type: 'string'
        statusCode:
          type: 'integer'
        errors:
          type: 'array'
          items:
            type: 'object'
            properties:
              property:
                type: 'string'
              constraint:
                type: 'array'
                items:
                  type: 'string'
  securitySchemes:
    api_key:
      type: 'apiKey'
      name: 'authorization'
      in: 'header'
      description: 'Bearer <YOUR_TOKEN>'
